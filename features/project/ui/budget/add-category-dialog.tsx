import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/shared/ui/dialog"
import { Button } from "@/shared/ui/button"
import { Input } from "@/shared/ui/input"
import { Label } from "@/shared/ui/label"
import type { BudgetCategory } from "./types"

interface AddCategoryDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onSubmit: (data: Omit<BudgetCategory, "id" | "createdAt" | "updatedAt">) => Promise<void>
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryIcons = [
  { value: "üè¢", label: "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è" },
  { value: "üçΩÔ∏è", label: "–ö–µ–π—Ç–µ—Ä–∏–Ω–≥" },
  { value: "üé≠", label: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
  { value: "üì∏", label: "–§–æ—Ç–æ/–í–∏–¥–µ–æ" },
  { value: "üéµ", label: "–ú—É–∑—ã–∫–∞" },
  { value: "üíê", label: "–î–µ–∫–æ—Ä–∞—Ü–∏–∏" },
  { value: "üöó", label: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" },
  { value: "üëî", label: "–ü–µ—Ä—Å–æ–Ω–∞–ª" },
  { value: "üéÅ", label: "–ü–æ–¥–∞—Ä–∫–∏" },
  { value: "üìÑ", label: "–î–æ–∫—É–º–µ–Ω—Ç—ã" },
  { value: "üîß", label: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ" },
  { value: "üì¢", label: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥" },
  { value: "üí°", label: "–ü—Ä–æ—á–µ–µ" }
]

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
const categoryColors = [
  { value: "#ef4444", label: "–ö—Ä–∞—Å–Ω—ã–π" },
  { value: "#f97316", label: "–û—Ä–∞–Ω–∂–µ–≤—ã–π" },
  { value: "#f59e0b", label: "–Ø–Ω—Ç–∞—Ä–Ω—ã–π" },
  { value: "#eab308", label: "–ñ–µ–ª—Ç—ã–π" },
  { value: "#84cc16", label: "–õ–∞–π–º" },
  { value: "#22c55e", label: "–ó–µ–ª–µ–Ω—ã–π" },
  { value: "#10b981", label: "–ò–∑—É–º—Ä—É–¥–Ω—ã–π" },
  { value: "#14b8a6", label: "–ë–∏—Ä—é–∑–æ–≤—ã–π" },
  { value: "#06b6d4", label: "–¶–∏–∞–Ω" },
  { value: "#0ea5e9", label: "–ì–æ–ª—É–±–æ–π" },
  { value: "#3b82f6", label: "–°–∏–Ω–∏–π" },
  { value: "#6366f1", label: "–ò–Ω–¥–∏–≥–æ" },
  { value: "#8b5cf6", label: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π" },
  { value: "#a855f7", label: "–ü—É—Ä–ø—É—Ä–Ω—ã–π" },
  { value: "#d946ef", label: "–§—É–∫—Å–∏—è" },
  { value: "#ec4899", label: "–†–æ–∑–æ–≤—ã–π" },
]

export function AddCategoryDialog({
  open,
  onOpenChange,
  onSubmit
}: AddCategoryDialogProps) {
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    icon: "üí°",
    color: "#6366f1",
    orderIndex: 0
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.name) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
      return
    }

    await onSubmit({
      ...formData,
      projectId: "" // Will be set by parent
    })

    // Reset form
    setFormData({
      name: "",
      description: "",
      icon: "üí°",
      color: "#6366f1",
      orderIndex: 0
    })

    onOpenChange(false)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</DialogTitle>
            <DialogDescription>
              –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
            <div className="space-y-2">
              <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ *</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ–∫–æ—Ä–∞—Ü–∏–∏"
                required
              />
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div className="space-y-2">
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Input
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
              />
            </div>

            {/* –ò–∫–æ–Ω–∫–∞ */}
            <div className="space-y-2">
              <Label htmlFor="icon">–ò–∫–æ–Ω–∫–∞</Label>
              <select
                id="icon"
                value={formData.icon}
                onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
                className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
              >
                {categoryIcons.map((icon) => (
                  <option key={icon.value} value={icon.value}>
                    {icon.value} {icon.label}
                  </option>
                ))}
              </select>
            </div>

            {/* –¶–≤–µ—Ç */}
            <div className="space-y-2">
              <Label htmlFor="color">–¶–≤–µ—Ç</Label>
              <div className="flex gap-2 items-center">
                <select
                  id="color"
                  value={formData.color}
                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}
                  className="flex-1 h-10 rounded-md border border-input bg-background px-3 py-2 text-sm"
                >
                  {categoryColors.map((color) => (
                    <option key={color.value} value={color.value}>
                      {color.label}
                    </option>
                  ))}
                </select>
                <div
                  className="w-10 h-10 rounded-md border"
                  style={{ backgroundColor: formData.color }}
                />
              </div>
            </div>

            {/* –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
            <div className="space-y-2">
              <Label htmlFor="orderIndex">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</Label>
              <Input
                id="orderIndex"
                type="number"
                min="0"
                value={formData.orderIndex}
                onChange={(e) => setFormData({ ...formData, orderIndex: parseInt(e.target.value) || 0 })}
                placeholder="0"
              />
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit">
              –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}